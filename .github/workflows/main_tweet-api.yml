name: Deploy Flask API with TFLite Model

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    # Étape 1 : Récupérer le code source depuis le dépôt GitHub
    - name: Checkout code
      uses: actions/checkout@v2

    # Étape 2 : Configurer Python 3.11
    - name: Set up Python 3.11
      uses: actions/setup-python@v2
      with:
        python-version: '3.11'

    # Étape 3 : Installer les dépendances dans un environnement virtuel
    - name: Install dependencies
      run: |
        python -m venv venv
        source venv/bin/activate
        pip install --upgrade pip
        pip install -r requirements.txt

    # Étape 4 : Vérifier si le modèle TFLite est bien présent, installer spaCy et gensim, et télécharger les modèles
    - name: Download and prepare models
      run: |
        source venv/bin/activate
        # Vérifier si le modèle TFLite est bien présent
        if [ -f ./notebooks/modèle_avancé/cnn_model_256_3_0.5.tflite ]; then
          echo "Modèle TFLite déjà présent."
        else
          echo "Erreur : Le modèle TFLite n'a pas été trouvé." && exit 1
        fi

        # Assurer que spaCy est bien installé
        pip install spacy

        # Télécharger le modèle spaCy
        python -m spacy download en_core_web_sm
        
        # Assurer que Gensim est bien installé
        pip install gensim

        # Charger le modèle FastText avec Gensim (précache les embeddings)
        python -c "import gensim.downloader as api; api.load('fasttext-wiki-news-subwords-300')"

    # Étape 6 : Déployer l'application sur Azure App Service
    - name: Deploy to Azure Web App
      run: |
        source venv/bin/activate
        az webapp up --name 'tweet-api' --sku F1 --location 'westeurope' --resource-group 'your-resource-group'
      uses: azure/webapps-deploy@v2
      with:
        app-name: 'tweet-api'
        publish-profile: ${{ secrets.AZURE_API }}
        package: .

    # Étape 7 : Exécuter Flask (avec Gunicorn pour un environnement production si nécessaire)
    - name: Start Flask server (Gunicorn)
      run: |
        source venv/bin/activate
        gunicorn --workers 3 main:app
