name: Deploy Flask API with TFLite Model

# Ce workflow s'exécute lors des pushes sur la branche "main"
on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    # Étape 1 : Récupérer le code source depuis le dépôt GitHub
    - name: Checkout code
      uses: actions/checkout@v2

    # Étape 2 : Configurer Python 3.11
    - name: Set up Python 3.11
      uses: actions/setup-python@v2
      with:
        python-version: '3.11'

    # Étape 3 : Installer les dépendances dans un environnement virtuel
    - name: Install dependencies
      run: |
        python -m venv venv
        source venv/bin/activate
        pip install --upgrade pip
        pip install -r requirements.txt
        python -m spacy download en_core_web_sm  # Télécharger le modèle spaCy

    # Étape 4 : Assurer que le modèle TFLite est bien placé dans le répertoire
    - name: Upload TFLite Model
      run: |
        mkdir -p models
        cp D:/Master_Openclassroom/Github/projet7-op/notebooks/modèle_avancé/cnn_model_256_3_0.5.tflite ./models/

    # Étape 5 : Exécuter les tests (si nécessaire)
    # Vous pouvez ajouter ici une étape pour exécuter des tests unitaires
    # - name: Run tests
    #   run: pytest

    # Étape 6 : Déployer l'application sur Azure App Service
    - name: Deploy to Azure Web App
      uses: azure/webapps-deploy@v2
      with:
        app-name: 'tweet-api'
        publish-profile: ${{ secrets.AZURE_API }}
        package: .


    # Étape 7 : Exécuter Flask (avec Gunicorn pour un environnement production si nécessaire)
    - name: Start Flask server (Gunicorn)
      run: |
        source venv/bin/activate
        gunicorn --workers 3 main:app


